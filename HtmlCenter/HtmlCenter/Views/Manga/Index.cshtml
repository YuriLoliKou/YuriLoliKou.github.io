
<div class="card shadow-sm mb-3">
	<div class="card-body">
		<div class="input-group mb-3">
			<div class="input-group-prepend me-3">
				<label class="input-group-text" for="inputGroupSelect01">篩選條件</label>
			</div>
			<div style="display: flex; align-self: center">
				<div class="form-check form-check-inline">
					<input v-model="searchType" class="form-check-input" type="radio" name="MatchType" id="MatchRadios1" value="partial" checked>
					<label class="form-check-label" for="MatchRadios1">部分符合</label>
				</div>
				<div class="form-check form-check-inline">
					<input v-model="searchType" class="form-check-input" type="radio" name="MatchType" id="MatchRadios2" value="exact">
					<label class="form-check-label" for="MatchRadios2">完全符合</label>
				</div>
			</div>
		</div>

		<div class="d-block"></div>

		<div style="box-shadow: inset 1px 1px 3px 0px #aaa; border-radius: 5px; padding: 0.5em; margin: 0 -0.5em;">
			@*<div class="input-group mb-3">
			<div class="input-group-prepend">
			<label class="input-group-text" for="inputGroupSelect01">標籤功能</label>
			</div>
			<select class="custom-select" id="inputGroupSelect01" v-model="selectedOption">
			<option value="show">搜尋標籤</option>
			<option value="hide"></option>
			</select>
			</div>*@
			<div class="input-group mb-3" style="z-index: 0;">
				<div class="input-group-prepend me-3">
					<label class="input-group-text" for="inputGroupSelect01">標籤操作</label>
				</div>
				<button type="button" class="btn rounded"
						:class="{ 'btn-outline-primary': searchMode != 1, 'btn-primary': searchMode == 1 }"
						@@click="searchMode = 1">
					查詢模式
				</button>
				<button type="button" class="btn rounded ms-3"
						:class="{ 'btn-outline-danger': searchMode != 2, 'btn-danger': searchMode == 2 }"
						@@click="searchMode = 2">
					排除模式
				</button>
				<span v-show="searchMode == 2" class="ms-2 text-danger fw-bold" style="align-self: center;">排除模式:點擊標籤可排除該特定資料(自己改)</span>
			</div>

			<div class="form-check-inline mb-2">
				<button class="btn btn-outline-success btn-sm" @@click="selectAllTags">全選</button>
			</div>
			<div class="form-check-inline mb-2">
				<button class="btn btn-outline-dark btn-sm" @@click="clearAllTags">全部清除</button>
			</div>

			<template v-for="type in tagType[0]">
				<div class="d-block"></div>
				<template v-for="(tag, index) in filteredTags(type)">
					<div class="form-check form-check-inline">
						<input v-model="tagList" :value="tag" class="form-check-input" type="checkbox" :id="'tagCheckbox' + tag" @@change="updateHiddenTagList(tag)">
						<label class="form-check-label" :class="{ 'strikethrough': isTagChecked(tag) }" :for="'tagCheckbox' + tag">{{ tag }}</label>
					</div>
				</template>
			</template>
		</div>
	</div>
</div>


<div v-for="(v, i) in mangaData" v-show="hasIntersection(v.tags, tagList)">
	<div class="card shadow-sm mb-3">
		<div class="card-body">
			<div class="row align-items-center">
				<div class="col-3 col-sm-2 col-lg-1">
					<img :src="'/image/Manga/' + v.name + '.jpg'" alt="Manga Image" style="max-height: 100px; max-width: 50px;" />
				</div>
				<div class="col-9 col-sm-6 col-lg-7">
					<div class="row">
						<p class="mb-0 px-0 col-3 col-sm-3 col-lg-2 " style="display: inline;">名稱:</p><p class="mb-0 col-9 col-sm-9 col-lg-10">{{ v.name }}</p>
						<p class="mb-0 px-0 col-3 col-sm-3 col-lg-2" style="display: inline;">原名:</p><p class="mb-0 col-9  col-sm-9 col-lg-10">{{ v.originalName }}</p>
						<p class="mb-0 px-0 col-3 col-sm-3 col-lg-2" style="display: inline;">作者:</p><p class="mb-0 col-9  col-sm-9 col-lg-10">{{v.author }}</p>
						<p class="mb-0 px-0 col-3 col-sm-3 col-lg-2" style="display: inline;">原作者:</p><p class="mb-0 col-9  col-sm-9 col-lg-10">{{ v.originalAuthor }}</p>
						<p class="mb-0 px-0 col-3 d-sm-none" style="display: inline;">標籤:</p><p class="mb-0 col-9 d-sm-none" style="display: inline;">{{ v.tags.join(', ') }}</p>
					</div>
				</div>
				<div class="col-sm-4 col-lg-4 d-none d-sm-block">
					<div class="row">
						<p class="mb-0 px-0 col-3 col-sm-3 col-lg-2 d-none d-sm-block" style="display: inline;">標籤:</p><p class="mb-0 col-9 col-sm-9 col-lg-10 d-none d-sm-block" style="display: inline;">{{ v.tags.join(', ') }}</p>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>


<script>
	component = {
		mixins: [baseMixin],
		data() {
			return {
				pageTitle: '百合漫畫區',
				mangaData: [],
				tagList: ['連載中', '已完結', '日本', '中國', '韓國', '其他地區',],
				hiddenTagList: ['斷更', '腰斬', '不定期更新', 'NTR', '微雷',],
				//selectedOption: "show",
				searchType: "partial",
				searchMode: 1,
				tagType: [],
				tagData: [],
			}
		},
		created() {
		},
		computed: {
			isTagChecked() {
				return (value) => {
					return this.hiddenTagList.includes(value);
				}
			},

			filteredTags() {
				return (tagType) => {
					for (const [key, value] of Object.entries(this.tagData[0])){
						if (key == tagType){
							return Reflect.get(this.tagData[0], key);
						}
					}
					//return this.tagData.filter((tag) => tag === tagType);
				};
			},
		},
		methods: {
			hasIntersection: function (ItemTags, tagList) {
				//if (tagList.length === 0) {
				//    return !this.hiddenTagList.some((tag) => ItemTags.includes(tag));
				//}
				//console.log("hasIntersection");
				for (let i = 0; i < tagList.length; i++) {
					switch (this.searchType) {
						case "partial":
							return tagList.some((tag) => ItemTags.includes(tag)) && !this.hiddenTagList.some((tag) => ItemTags.includes(tag));
							break;
						case "exact":
							return tagList.every((tag) => ItemTags.includes(tag)) && !this.hiddenTagList.some((tag) => ItemTags.includes(tag));
							break;
					}
				}
			},

			async fetchMangaData() {
				try {
					let mangaList = await this.dbQuery("Manga");
					mangaList.forEach((doc) => {
						this.mangaData.push(doc.data());
						//console.log(doc.id, " => ", doc.data());
					});
					let tagList = await this.dbQuery("Tags", "Manga");
					tagList.forEach((doc) => {
						this.tagType.push(Object.keys(doc.data().tagData).sort((a, b) => a.localeCompare(b)));
						this.tagData.push(doc.data().tagData);
					});
				} catch (error) {
					console.error("Error fetching manga data:", error);
				}
			},

			updateHiddenTagList(value) {
				const index = this.tagList.indexOf(value);
				const hideIndex = this.hiddenTagList.indexOf(value);

				switch (this.searchMode){
					case 1:
						if (hideIndex !== -1) {
							this.hiddenTagList.splice(hideIndex, 1);
						}
						break;
					case 2:
						if (index !== -1) {
							this.tagList.splice(index, 1);
							if (hideIndex != -1) {
								this.hiddenTagList.splice(hideIndex, 1);
							}
							else {
								this.hiddenTagList.push(value);
							}
						}
						else{
							this.hiddenTagList.push(value);
						}
						break;
				}
			},

			selectAllTags() {
				this.hiddenTagList = [];
				this.tagList = this.getAllTags();
			},
			clearAllTags() {
				this.tagList = [];
				this.hiddenTagList = [];
			},
			getAllTags() {
				const allTags = [];
				for (const type of this.tagType[0]) {
					const tags = this.filteredTags(type);
					allTags.push(...tags);
				}
				return allTags;
			},
		},
		watch: {
			tagList(nv, ov) {
			},
			searchType(nv, ov) {
			}
		},
		async mounted() {
			this.fetchMangaData();
		}
	}
	var formComponent = Vue.createApp(component)
</script>