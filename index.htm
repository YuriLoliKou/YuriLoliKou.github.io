
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>百合天地</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" />
    <link rel="stylesheet" href="/css/site.css" />
    <link rel="stylesheet" href="/css/image-cover-frame.css" />
    <link rel="stylesheet" href="/css/dynamic-form.css" />


    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://unpkg.com/vue@3.2.45/dist/vue.global.prod.js" type="text/javascript"></script>
    <script src="https://unpkg.com/lodash@4.17.21/lodash.min.js"></script>
    <script src="/lib/Sortable/Sortable.min.js?v=triwwTQbab50G53J2FyiXb7JlioSKMdmFfzZ1rel42Y"></script>
    <script src="/lib/vue/vuedraggable.umd.min.js?v=Lw1ELK88FKeUDXLNnLnHq0i7DjoaZVc2XqGnomXivjU"></script>
    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>

    <script src="/js/site.js?v=Dczxt5NuA0rUBOxULTgExDzm3GOIcsTv--kGt06O6mg"></script>
    <script src="/js/vue-mixin.js?v=60-8lnAHDhQs4zrnv01y_MNen1l1tnXdiqLCDE4wdc4"></script>
</head>

<body id="app">
    <script>
        var thisApp;
        var component;
        const baseMixin = {
            data() {
                return {
                    Layout: {
                        headTitle: document.getElementsByTagName("title")[0].innerHTML,
                    },
                    dbAssembly: {
                        ready: false,
                    },
                    authIsEnd: false,
                    isLoginFlag: false,
                    adminAccount: false,
                    myUid: "",
                }
            },
            beforeCreate() {
                thisApp = this
            },
            created() {
                thisApp.setHeadTitle(thisApp.pageTitle);
            },
            async mounted() {
                const uid = await this.isLogin();
                this.myUid = uid;
                if (uid) {
                    this.isLoginFlag = true;
                    const uidRef =await this.dbQuery("users", uid);
                    this.adminAccount = uidRef.exists();
                }
                this.authIsEnd = true;
            },
            computed: {
            },
            methods: {
                firestoreInit: function () {
                    return new Promise((resolve, reject) => {
                        import("/js/firestore.js?v=1.0.06")
                            .then(module => {
                                thisApp.dbAssembly = module.dbAssembly;
                                resolve(true);
                            })
                    });
                },
                getDbAssembly: async function () {
                    let { ready } = thisApp.dbAssembly;

                    if (!ready) { await thisApp.firestoreInit(); }
                    return thisApp.dbAssembly;
                },
                dbInsert: async function (collectionName, data, docId = null) {
                    let { addDoc, setDoc, doc, collection, db } = await thisApp.getDbAssembly();
                    if (docId != null) { return await setDoc(doc(db, collectionName, docId), data); }
                    else { return await addDoc(collection(db, collectionName), data); }
                    
                },
                dbUpdate: async function (collectionName, docId, data) {
                    let { doc, updateDoc, db } = await thisApp.getDbAssembly();
                    const docRef = doc(db, collectionName, docId);
                    return await updateDoc(docRef, data);
                },
                dbQuery: async function (collectionName, docId = null) {
                    let { db, doc, getDoc, getDocs, collection } = await thisApp.getDbAssembly();
                    if (docId != null) { return await getDoc(doc(db, collectionName, docId)); }
                    else { return await getDocs(collection(db, collectionName)); }
                },
                dbQueryByWhere: async function (collectionName, condition) {
                    let { db, collection, query, where, getDocs } = await thisApp.getDbAssembly();
                    const q = query(collection(db, collectionName), condition);
                    return await getDocs(q);
                },
                dbDeleteDoc: async function (collectionName, docId) {
                    let { db, doc, deleteDoc } = await thisApp.getDbAssembly();
                    return await deleteDoc(doc(db, collectionName, docId));
                },
                isLogin: async function () {
                    let { isLogin } = await thisApp.getDbAssembly();
                    return await isLogin();
                },
                signIn: async function () {
                    let { googleSignIn } = await thisApp.getDbAssembly();
                    return await googleSignIn();
                },
                accountSignOut: async function () {
                    let { accountSignOut } = await thisApp.getDbAssembly();
                    await accountSignOut();
                },
                signInWithEmail: async function (email, password) {
                    let { emailSignIn } = await thisApp.getDbAssembly();
                    return await emailSignIn(email, password);
                },
                getImage: async function (path) {
                    let { getImage } = await thisApp.getDbAssembly();
                    return await getImage(path);
                },
                deleteImage: async function (fileName) {
                    let { deleteImage } = await thisApp.getDbAssembly();
                    return await deleteImage(fileName);
                },
                uploadImage: async function (imageFile, fileName) {
                    let { uploadImage } = await thisApp.getDbAssembly();
                    return await uploadImage(imageFile, fileName);
                },
                newGuid: function () {
                    return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =>
                        (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
                    );
                },
                setHeadTitle(title) {
                    if (!title) { return; }
                    document.getElementsByTagName("title")[0].innerHTML = thisApp.Layout.headTitle + ' - ' + title;
                },

            },
        }
    </script>

    <header style="z-index: 5;">
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3 px-5 nav-shadow navbar-animation">
            <div class="container-fluid">
                <a class="navbar-brand fw-bold fs-3 logo-text" href="/">百合天地</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                        aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                    <ul class="navbar-nav flex-grow-1">
                        <li class="nav-item me-3 px-2">
                            <a class="nav-link text-dark" href="/manga">百合漫畫區</a>
                        </li>
                        <li v-show="adminAccount" class="nav-item me-3 px-2">
                            <a class="nav-link text-dark" href="/adminconsole">管理區</a>
                        </li>
                    </ul>
                    <ul class="navbar-nav flex-grow-1" style="justify-content: flex-end">
                        <li v-show="authIsEnd" class="nav-item me-3 px-2">
                            <div v-if="!isLoginFlag" class="nav-link text-dark" @click="signIn()" style="cursor:pointer">登入</div>
                            <div v-if="isLoginFlag" class="nav-link text-dark" @click="accountSignOut()" style="cursor:pointer">登出</div>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
    </header>
    <div class="container header-margin">
        <main role="main" class="pb-3">
            <div class="background-video pc-limit">
                <img src="/image/bg.jpg" style=" opacity: 0.8; width: 100vw; height:auto" />
            </div>

            <div class="background-video mobile-limit">
                <img src="/image/bg.jpg" style=" opacity: 0.8; width: 100vw; height:auto" />
            </div>
            

<div class="card card-transparent shadow-sm mb-3">
    <div class="card-body">
        <div class="row">
            <div class="col-120">
                <p class="fw-bold fs-5 title-text">網站介紹</p>
                網站使用的是<a href="https://s7514381.github.io/" target="_blank">s7514381.github.io</a>自製的框架，並且協助製作而成。<br /><br />
                個人的紀錄僅供參考查詢，只記錄百合GL作品。不包含輕百、單戀、只有配角百合的作品。<br /><br />
                只放商業化的連載、單行本或非商業化作者自行連載的作品並且不是短篇(至少有一本的篇幅)。<br /><br />
                ※「潔癖預警」標籤的作品中，女主之一符合以下其一或多個條件<br />
                ・與其他男性或女性接過吻或發生過關係（後宮除外）<br />
                ・交過男友或女友且有過親密關係<br />
                ・人妻、離過婚、風俗小姐、援交等角色<br /><br />
                聯繫信箱<a href="mailto:zrobbertz@gmail.com">zrobbertz@gmail.com</a><br />
            </div>
        </div>
    </div>
</div>

<div class="card card-transparent shadow-sm mb-3">
    <div class="card-header"><p class="fw-bold fs-5 title-text mb-0">最近更新</p></div>
    <div class="card-body">
        <p>2023/5/30 "ふたり部屋"次回完結!!</p>
        <pre class="fw-bold fs-25">2023/5/30 "ふたり部屋"次回完結!!</pre>
    </div>
</div>


<script>
    component = {
        mixins: [baseMixin],
        data() {
            return {
                pageTitle: '首頁',

            }
        },
        async created() {
            //await thisApp.signIn();
        },
        methods: {

        },
    }
    var formComponent = Vue.createApp(component)
</script>

        </main>
    </div>

    <footer class="border-top footer text-muted">
        <div class="container">
            &copy; 2023 - Github - <a style="color: #6c757d" href="/Home/UpdateRenderView">更新</a>
        </div>
    </footer>

    <script>
        var vApp = formComponent.mount('#app')
    </script>



</body>
</html>
