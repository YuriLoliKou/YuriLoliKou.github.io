
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>百合天地</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" />
    <link rel="stylesheet" href="/css/site.css" />
    <link rel="stylesheet" href="/css/image-cover-frame.css" />
    <link rel="stylesheet" href="/css/dynamic-form.css" />


    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://unpkg.com/vue@3.2.45/dist/vue.global.prod.js" type="text/javascript"></script>
    <script src="https://unpkg.com/lodash@4.17.21/lodash.min.js"></script>
    <script src="/lib/Sortable/Sortable.min.js?v=triwwTQbab50G53J2FyiXb7JlioSKMdmFfzZ1rel42Y"></script>
    <script src="/lib/vue/vuedraggable.umd.min.js?v=Lw1ELK88FKeUDXLNnLnHq0i7DjoaZVc2XqGnomXivjU"></script>
    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>

    <script src="/js/site.js?v=Dczxt5NuA0rUBOxULTgExDzm3GOIcsTv--kGt06O6mg"></script>
    <script src="/js/vue-mixin.js?v=60-8lnAHDhQs4zrnv01y_MNen1l1tnXdiqLCDE4wdc4"></script>
</head>

<body id="app">
    <script>
        var thisApp;
        var component;
        const baseMixin = {
            data() {
                return {
                    Layout: {
                        headTitle: document.getElementsByTagName("title")[0].innerHTML,
                    },
                    dbAssembly: {
                        ready: false,
                    },
                    authIsEnd: false,
                    isLoginFlag: false,
                    adminAccount: false,
                    myUid: "",
                }
            },
            beforeCreate() {
                thisApp = this
            },
            created() {
                thisApp.setHeadTitle(thisApp.pageTitle);
            },
            async mounted() {
                const uid = await this.isLogin();
                this.myUid = uid;
                if (uid) {
                    this.isLoginFlag = true;
                    const uidRef =await this.dbQuery("users", uid);
                    this.adminAccount = uidRef.exists();
                }
                this.authIsEnd = true;
            },
            computed: {
            },
            methods: {
                firestoreInit: function () {
                    return new Promise((resolve, reject) => {
                        import("/js/firestore.js?v=1.0.06")
                            .then(module => {
                                thisApp.dbAssembly = module.dbAssembly;
                                resolve(true);
                            })
                    });
                },
                getDbAssembly: async function () {
                    let { ready } = thisApp.dbAssembly;

                    if (!ready) { await thisApp.firestoreInit(); }
                    return thisApp.dbAssembly;
                },
                dbInsert: async function (collectionName, data, docId = null) {
                    let { addDoc, setDoc, doc, collection, db } = await thisApp.getDbAssembly();
                    if (docId != null) { return await setDoc(doc(db, collectionName, docId), data); }
                    else { return await addDoc(collection(db, collectionName), data); }
                    
                },
                dbUpdate: async function (collectionName, docId, data) {
                    let { doc, updateDoc, db } = await thisApp.getDbAssembly();
                    const docRef = doc(db, collectionName, docId);
                    return await updateDoc(docRef, data);
                },
                dbQuery: async function (collectionName, docId = null) {
                    let { db, doc, getDoc, getDocs, collection } = await thisApp.getDbAssembly();
                    if (docId != null) { return await getDoc(doc(db, collectionName, docId)); }
                    else { return await getDocs(collection(db, collectionName)); }
                },
                dbQueryByWhere: async function (collectionName, condition) {
                    let { db, collection, query, where, getDocs } = await thisApp.getDbAssembly();
                    const q = query(collection(db, collectionName), condition);
                    return await getDocs(q);
                },
                dbDeleteDoc: async function (collectionName, docId) {
                    let { db, doc, deleteDoc } = await thisApp.getDbAssembly();
                    return await deleteDoc(doc(db, collectionName, docId));
                },
                isLogin: async function () {
                    let { isLogin } = await thisApp.getDbAssembly();
                    return await isLogin();
                },
                signIn: async function () {
                    let { googleSignIn } = await thisApp.getDbAssembly();
                    return await googleSignIn();
                },
                accountSignOut: async function () {
                    let { accountSignOut } = await thisApp.getDbAssembly();
                    await accountSignOut();
                },
                signInWithEmail: async function (email, password) {
                    let { emailSignIn } = await thisApp.getDbAssembly();
                    return await emailSignIn(email, password);
                },
                getImage: async function (path) {
                    let { getImage } = await thisApp.getDbAssembly();
                    return await getImage(path);
                },
                deleteImage: async function (fileName) {
                    let { deleteImage } = await thisApp.getDbAssembly();
                    return await deleteImage(fileName);
                },
                uploadImage: async function (imageFile, fileName) {
                    let { uploadImage } = await thisApp.getDbAssembly();
                    return await uploadImage(imageFile, fileName);
                },
                newGuid: function () {
                    return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =>
                        (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
                    );
                },
                setHeadTitle(title) {
                    if (!title) { return; }
                    document.getElementsByTagName("title")[0].innerHTML = thisApp.Layout.headTitle + ' - ' + title;
                },

            },
        }
    </script>

    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3 px-5 nav-shadow navbar-animation">
            <div class="container-fluid">
                <a class="navbar-brand fw-bold fs-3 logo-text" href="/">百合天地</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                        aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                    <ul class="navbar-nav flex-grow-1">
                        <li class="nav-item me-3 px-2">
                            <a class="nav-link text-dark" href="/manga">百合漫畫區</a>
                        </li>
                        <li v-show="adminAccount" class="nav-item me-3 px-2">
                            <a class="nav-link text-dark" href="/adminconsole">管理區</a>
                        </li>
                    </ul>
                    <ul class="navbar-nav flex-grow-1" style="justify-content: flex-end">
                        <li v-show="authIsEnd" class="nav-item me-3 px-2">
                            <div v-if="!isLoginFlag" class="nav-link text-dark" @click="signIn()" style="cursor:pointer">登入</div>
                            <div v-if="isLoginFlag" class="nav-link text-dark" @click="accountSignOut()" style="cursor:pointer">登出</div>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
    </header>
    <div class="container header-margin">
        <main role="main" class="pb-3">
            <div class="background-video pc-limit">
                <img src="/image/bg.jpg" style=" opacity: 0.8; width: 100vw; height:auto" />
            </div>

            <div class="background-video mobile-limit">
                <img src="/image/bg.jpg" style=" opacity: 0.8; width: 100vw; height:auto" />
            </div>
            <div class="card shadow-sm mb-3">
	<div class="card-header"><p class="fw-bold fs-5 title-text mb-0">AddMangaData</p></div>
	<div class="row ms-1">
		<div class="card-body col-6">
			<div class="input-group mb-3">
				<form id="MangaForm">
					<div class="form-group">
						<input type="text" v-model="manga_name" placeholder="Name">
					</div>
					<div class="form-group">
						<input type="text" v-model="manga_originalName" placeholder="OriginalName">
					</div>
					<div class="form-group">
						<input type="text" v-model="manga_author" placeholder="Author">
					</div>
					<div class="form-group">
						<input type="text" v-model="manga_originalAuthor" placeholder="OriginalAuthor">
					</div>
					<div class="input-group-prepend me-3">
						<label class="border border-3">Tags</label>
					</div>
					<template v-for="data of this.tagData">
						<div class="form-check form-check-inline">
							<input v-model="manga_tags" :value="data.id" class="form-check-input" type="checkbox" :id="'tagCheckbox' + data.name">
							<label class="form-check-label" :for="'tagCheckbox' + data.name">{{ data.name }}</label>
						</div>
					</template>
				</form>
			</div>
			<input type="file" id="fileInput" style="display: none;">
			<button class="btn btn-outline-success btn-sm" type="submit" @click="submitMangaForm">選擇圖片並上傳</button>
		</div>
		<div class="card-body col-6 text-center text-center-self">
			<div class="spinner-border text-primary" role="status" v-show="manga_show">
				<span class="visually-hidden">Loading...</span>
			</div>
			<transition name="fade">
				<span class="fs-2" :style="getStyleMangaMessage" v-if="manga_message != ''">{{ manga_message }}</span>
			</transition>
		</div>
	</div>
</div>


<div v-for="([key, v], i) in Object.entries(savedMangaData)">
	<div class="card shadow-sm mb-3">
		<div class="card-body">
			<div class="row align-items-center ms-1">
				<div class="col-3 col-sm-2 col-lg-1">
					<img :src="this.savedMangaImage[key]" alt="" style="max-height: 100px; max-width: 50px;" />
				</div>
				<div class="col-7 col-sm-4 col-lg-6">
					<div class="row">
						<p class="mb-0 px-0 col-3 col-sm-3 col-lg-2 " style="display: inline;">Id:</p><p class="mb-0 col-9 col-sm-9 col-lg-10">{{ key }}</p>
						<p class="mb-0 px-0 col-3 col-sm-3 col-lg-2 " style="display: inline;">名稱:</p><p class="mb-0 col-9 col-sm-9 col-lg-10">{{ v.name }}</p>
						<p class="mb-0 px-0 col-3 col-sm-3 col-lg-2" style="display: inline;">原名:</p><p class="mb-0 col-9  col-sm-9 col-lg-10">{{ v.originalName }}</p>
						<p class="mb-0 px-0 col-3 col-sm-3 col-lg-2" style="display: inline;">作者:</p><p class="mb-0 col-9  col-sm-9 col-lg-10">{{ v.author }}</p>
						<p class="mb-0 px-0 col-3 col-sm-3 col-lg-2" style="display: inline;">原作者:</p><p class="mb-0 col-9  col-sm-9 col-lg-10">{{ v.originalAuthor }}</p>
						<p class="mb-0 px-0 col-3 d-sm-none" style="display: inline;">標籤:</p><p class="mb-0 col-9 d-sm-none" style="display: inline;">{{ formatTags(v.tags) }}</p>
					</div>
				</div>
				<div class="col-sm-4 col-lg-4 d-none d-sm-block">
					<div class="row">
						<p class="mb-0 px-0 col-3 col-sm-3 col-lg-2 d-none d-sm-block" style="display: inline;">標籤:</p><p class="mb-0 col-9 col-sm-9 col-lg-10 d-none d-sm-block" style="display: inline;">{{ formatTags(v.tags) }}</p>
					</div>
				</div>
				<div class="col-2 col-sm-2 col-lg-1 text-center text-center-self">
					<button class="btn btn-outline-danger btn-sm" type="submit" @click="deleteMangaData(key)">刪除</button>
				</div>
			</div>
		</div>
	</div>
</div>

<div class="card shadow-sm mb-3">
	<div class="card-header"><p class="fw-bold fs-5 title-text mb-0">GenerateMangaDataForJson</p></div>
	<div class="row ms-1">
		<div class="card-body col-3 text-center-self">
			<div>
				<button class="btn btn-outline-success btn-sm" type="submit" @click="generateMangaDataForJson">更新Json檔</button>
			</div>
		</div>
		<div class="card-body col-6 text-center text-center-self">
			<div class="spinner-border text-primary" role="status" v-show="manga_json_show">
				<span class="visually-hidden">Loading...</span>
			</div>
			<transition name="fade">
				<span class="fs-4" :style="getStyleMangaJsonMessage" v-if="manga_json_message != ''">{{ manga_json_message }}</span>
			</transition>
		</div>
		<div class="card-body col-3 text-center text-center-self">
		</div>
	</div>
</div>

<div class="card shadow-sm mb-3">
	<div class="card-header"><p class="fw-bold fs-5 title-text mb-0">DeleteMangaData</p></div>
	<div class="row ms-1">
		<div class="card-body col-6">
			<div class="input-group mb-3">
				<form id="MangaForm">
					<div class="form-group">
						<input type="text" v-model="manga_delete_name" placeholder="Name">
					</div>
				</form>
			</div>
			<button class="btn btn-outline-danger btn-sm" type="submit" @click="deleteMangaDataByName">刪除</button>
		</div>
		<div class="card-body col-6 text-center text-center-self">
			<div class="spinner-border text-primary" role="status" v-show="manga_delete_show">
				<span class="visually-hidden">Loading...</span>
			</div>
			<transition name="fade">
				<span class="fs-2" :style="getStyleMangaDeleteMessage" v-if="manga_delete_message != ''">{{ manga_delete_message }}</span>
			</transition>
		</div>
	</div>
</div>


<script>
	component = {
		mixins: [baseMixin],
		data() {
			return {
				pageTitle: '管理頁面',

				savedMangaData:{},
				savedMangaImage:{},
				tagData: [],
				isEventHandlerRegistered: false,

				manga_name: '',
				manga_originalName: '',
				manga_author: '',
				manga_originalAuthor: '',
				manga_tags: [],

				manga_delete_name: '',

				manga_show: false,
				manga_message: '',
				manga_success: false,

				manga_json_show: false,
				manga_json_message:'',
				manga_json_success: false,

				manga_delete_show: false,
				manga_delete_message: '',
				manga_delete_success: 1,
			}
		},
		created() {
			//this.signIn();
			this.loadAddedMangasData();
		},
		computed: {
			getStyleMangaMessage() {
				if (this.manga_success == true) {
					return {
						color: "aqua",
					};
				} else {
					return {
						color: "red",
					};
				}
			},

			getStyleMangaJsonMessage(){
				if (this.manga_json_success == true) {
					return {
						color: "aqua",
					};
				} else {
					return {
						color: "red",
					};
				}
			},

			getStyleMangaDeleteMessage() {
				switch (this.manga_delete_success){
					case 1:
						return {
							color: "aqua",
						};
					case 2:
						return {
							color: "red",
						};
					case 3:
						return {
							color: "chocolate",
						};
				}
			},
		},
		methods: {
			loadAddedMangasData() {
				const AddedMangasData = localStorage.getItem('AddedMangasData');
				const AddedMangasImage = localStorage.getItem('AddedMangasImage');

				if (AddedMangasData) {
					this.savedMangaData = JSON.parse(AddedMangasData);
				}
				if (AddedMangasImage) {
					this.AddedMangasImage = JSON.parse(AddedMangasImage);
				}
			},

			async submitMangaForm() {
				let addedId = '';

				this.manga_tags.sort(function (a, b) {
					return a - b;
				});

				try {
					//const formDataJson = JSON.stringify(this.savedMangaData[this.manga_id]);
					//const formDataObj = JSON.parse(formDataJson);
					
					//選擇圖片
					const fileInput = document.getElementById('fileInput');
					const handleFileChange = async (e) => {
						this.manga_show = true;

						const file = e.target.files[0];
						if (file) {
							const fileExtension = file.name.split('.').pop();
							if (fileExtension != 'jpg') {
								this.manga_show = false;
								this.showMessage('manga_message', 'manga_success', false, "請選擇jpg檔!!", 3000);
								return;
							}
							const formData = {
								name: this.manga_name,
								originalName: this.manga_originalName,
								author: this.manga_author,
								originalAuthor: this.manga_originalAuthor,
								tags: this.manga_tags,
							};
							//新增資料進Firestore並取得ID後本地化儲存
							const docRef = await this.dbInsert("Manga", formData);
							addedId = docRef.id;
							this.savedMangaData[addedId] = formData;
							localStorage.setItem('AddedMangasData', JSON.stringify(this.savedMangaData));
							// 將圖片命名為文檔ID
							const fileNameWithId = addedId + '.' + fileExtension;
							const fileName = 'Manga/' + fileNameWithId;
							//下載圖片備份
							const modifiedFile = new File([file], fileNameWithId, { type: file.type });
							const downloadLink = document.createElement('a');
							downloadLink.href = URL.createObjectURL(modifiedFile);
							downloadLink.download = modifiedFile.name;
							downloadLink.click();
							URL.revokeObjectURL(downloadLink.href);
							// 上傳圖片至 Firebase Cloud Storage
							await this.uploadImage(file, fileName);
							this.savedMangaImage[addedId] = await this.getImage(fileName);
							localStorage.setItem('AddedMangasImage', JSON.stringify(this.savedMangaImage));
							this.manga_show = false;
							this.clearFormMessage();
							//輸出結果
							this.showMessage('manga_message', 'manga_success', true, "上傳成功!!", 3000);
							console.log('資料已成功寫入Firestore');
						}else{
							this.manga_show = false;
							this.showMessage('manga_message', 'manga_success', false, "請選擇圖片!!", 3000);
						}
					};

					if (!this.isEventHandlerRegistered) {
						fileInput.addEventListener('change', handleFileChange);
						this.isEventHandlerRegistered = true;
					}
					fileInput.click();
					
				} catch (error) {
					this.manga_show = false;
					this.deleteMangaData(addedId);
					this.clearFormMessage();
					//輸出結果
					this.showMessage('manga_message', 'manga_success', false, "上傳失敗!!", 3000);
					console.error('資料寫入失敗：', error);
				}
			},

			async deleteMangaData(Id){
				try {
					this.manga_show = true;
					delete this.savedMangaData[Id];
					localStorage.setItem('AddedMangasData', JSON.stringify(this.savedMangaData));
					delete this.savedMangaImage[Id];
					localStorage.setItem('AddedMangasImage', JSON.stringify(this.savedMangaImage));
					await this.dbDeleteDoc("Manga", Id);
					const deletePath = "Manga/" + Id + '.jpg';
					await this.deleteImage(deletePath);

					this.manga_show = false;
					this.showMessage('manga_message', 'manga_success', true, "ID: " + Id + "刪除成功", 3000);
				} catch (error) {
					this.manga_show = false;
					this.showMessage('manga_message', 'manga_success', false, "ID: " + Id + "刪除失敗", 3000);
				}
				
			},

			async generateMangaDataForJson(){
				try{
					//是否有新增資料
					if (Object.keys(this.savedMangaData).length == 0) {
						this.showMessage('manga_json_message', 'manga_json_success', false, "尚未新增資料!!", 1500);
						return;
					}
					this.manga_json_show = true;
					//讀取Firestore數據將Json文字轉為物件
					const mangaList = await this.dbQuery("Json", "Manga");
					const jsonString = mangaList.data().jsonString;
					let jsonData = JSON.parse(jsonString);
					//新增數據至Json物件
					const keys = Object.keys(this.savedMangaData);
					for (let i = 0; i < keys.length; i++) {
						jsonData[keys[i]] = this.savedMangaData[keys[i]];
					}
					//重新排序
					const sortedKeys = Object.keys(jsonData).sort((a, b) => {
						const nameA = jsonData[a].name;
						const nameB = jsonData[b].name;
						// 判斷是否為英文字符串
						const isEnglishA = /^[a-zA-Z]/.test(nameA);
						const isEnglishB = /^[a-zA-Z]/.test(nameB);
						// 根據英文與非英文字符串的不同進行排序
						if (isEnglishA && !isEnglishB) {
							return -1; // a 在 b 前面
						} else if (!isEnglishA && isEnglishB) {
							return 1; // b 在 a 前面
						} else {
							return nameA.localeCompare(nameB); // 默認
						}
					});
					//先放入array照順序排序，再轉回物件再轉為Json
					const sortedArray = [];
					sortedKeys.forEach(key => {
						const item = {
							[key]: jsonData[key]
						};
						sortedArray.push(item);
					});
					const sortedObject = sortedArray.reduce((obj, item) => {
						const key = Object.keys(item)[0];
						obj[key] = item[key];
						return obj;
					}, {});
					jsonData = sortedObject;
					console.log(jsonData);
					console.log(JSON.stringify(jsonData));
					//更新Firestore數據
					await this.dbUpdate("Json", "Manga", {
						jsonString: JSON.stringify(jsonData)
					});
					//刪除本地新增的數據
					this.savedMangaData = {};
					this.savedMangaImage = {};
					localStorage.setItem('AddedMangasData', JSON.stringify(this.savedMangaData));
					localStorage.setItem('AddedMangasImage', JSON.stringify(this.savedMangaImage));
					this.manga_json_show = false;
					//輸出結果
					this.showMessage('manga_json_message', 'manga_json_success', true, "Json資料更新成功!!", 1500);
					console.log('Json資料已成功寫入Firestore');
				} catch (error) {
					this.manga_json_show = false;
					this.showMessage('manga_json_message', 'manga_json_success', false, "Json資料更新失敗!!", 1500);
					console.error('Json資料寫入失敗：', error);
				}
				
			},

			async deleteMangaDataByName(){
				try{
					this.manga_delete_show = true;
					let jsonDataExist = false;
					let mangaDataExist = false;
					let imageDataExist = false;
					//讀取Firestore數據將Json文字轉為物件
					const mangaList = await this.dbQuery("Json", "Manga");
					const jsonString = mangaList.data().jsonString;
					//console.log(jsonString)
					let jsonData = JSON.parse(jsonString);
					//刪除Json文件內指定名稱的文件
					const keys = Object.keys(jsonData);
					for (let i = 0; i < keys.length; i++) {
						if (jsonData[keys[i]].name == this.manga_delete_name) {
							jsonDataExist = true;
							delete jsonData[keys[i]];
						}
					}
					//刪除資料庫中Manga集合內指定name的文件
					let { where } = await thisApp.getDbAssembly();
					const condition = where("name", "==", this.manga_delete_name);
					const querySnapshot = await this.dbQueryByWhere("Manga", condition);

					for (let i = 0; i < querySnapshot.docs.length; i++){
						console.log('刪除符合ID: ',querySnapshot.docs[i].id)
						await this.dbDeleteDoc("Manga", querySnapshot.docs[i].id);
						mangaDataExist = true;
					}
					//Json物件轉為Json文字後更新資料庫Json數據
					await this.dbUpdate("Json", "Manga", {
						jsonString: JSON.stringify(jsonData)
					});
					//刪除Firebase Cloud圖片
					for (let i = 0; i < querySnapshot.docs.length; i++) {
						console.log('刪除符合ID圖片: ', querySnapshot.docs[i].id)
						const deletePath = "Manga/" + querySnapshot.docs[i].id + '.jpg';
						await this.deleteImage(deletePath);
						imageDataExist = true;
					}
					this.manga_delete_show = false;
					//輸出結果
					let resultText = jsonDataExist == true ? "Json資料刪除成功!!\n" : "Json資料刪除失敗!!\n";
					resultText += mangaDataExist == true ? "Manga數據刪除成功!!\n" : "Manga數據刪除失敗!!\n";
					resultText += imageDataExist == true ? "Image數據刪除成功!!\n" : "Image數據刪除失敗!!\n";

					if (jsonDataExist && mangaDataExist && imageDataExist) {
						this.showMessage('manga_delete_message', 'manga_delete_success', 1, resultText, 3000);
						this.manga_delete_name = '';
						console.log('資料刪除成功');
					} else if (jsonDataExist || mangaDataExist || imageDataExist) {
						this.showMessage('manga_delete_message', 'manga_delete_success', 3, resultText, 6000);
						console.log('資料部分刪除成功');
					} else {
						this.showMessage('manga_delete_message', 'manga_delete_success', 2, "查無資料!!", 3000);
						console.log('查無符合資料');
					}
				} catch (error) {
					this.manga_delete_show = false;
					this.showMessage('manga_delete_message', 'manga_delete_success', 2, "資料刪除失敗", 3000);
					console.error('資料刪除失敗：', error);
				}
			},

			async fetchTagsData(){
				const cachedTagsData = localStorage.getItem('TagsData');
				if (cachedTagsData) {
					this.tagData = JSON.parse(cachedTagsData);
				} else {
					try {
						let tagList = await this.dbQuery("Tags", "MangaSetting");
						//將讀取到的tagList轉為array照id順序保存
						const array = Object.entries(tagList.data()).map(([key, value]) => {
							const id = key.padStart(3, '0');
							return { id, ...value };
						});
						// 依照讀取到sequence進行排序並存入tagData
						this.tagData = array.sort((a, b) => a.sequence - b.sequence);
						//本地化儲存
						localStorage.setItem('TagsData', JSON.stringify(this.tagData));
						console.log("fetchTagsData Success");
					} catch (error) {
						console.error("Error fetching tags data:", error);
					}
				}
			},

			formatTags(tags) {
				let tagsString = [];
				if (tags){
					for (tag of tags) {
						const filteredData = this.tagData.filter(obj => obj.id === tag).map(obj => obj.name);
						//console.log(filteredData)
						tagsString.push(filteredData);
					}
				}
				return tagsString.join(', ');
			},

			clearFormMessage() {
				this.manga_id = ''; 
				this.manga_name = '';
				this.manga_originalName = '';
				this.manga_author = '';
				this.manga_originalAuthor = '';
				this.manga_tags = [];
			},

			showMessage(obj, obj_flag, flag, text, duration) {
				this[obj_flag] = flag;
				this[obj] = text;
				setTimeout(() => {
					this[obj] = '';
				}, duration);
			},
		},
		watch: {

		},
		async mounted() {
			this.fetchTagsData();
		}
	}
	var formComponent = Vue.createApp(component)
</script>
        </main>
    </div>

    <footer class="border-top footer text-muted">
        <div class="container">
            &copy; 2023 - Github - <a style="color: #6c757d" href="/Home/UpdateRenderView">更新</a>
        </div>
    </footer>

    <script>
        var vApp = formComponent.mount('#app')
    </script>



</body>
</html>
