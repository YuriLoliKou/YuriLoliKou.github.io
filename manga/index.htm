
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>百合天地</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" />
    <link rel="stylesheet" href="/css/site.css" />
    <link rel="stylesheet" href="/css/image-cover-frame.css" />
    <link rel="stylesheet" href="/css/dynamic-form.css" />


    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://unpkg.com/vue@3.2.45/dist/vue.global.prod.js" type="text/javascript"></script>
    <script src="/lib/Sortable/Sortable.min.js?v=triwwTQbab50G53J2FyiXb7JlioSKMdmFfzZ1rel42Y"></script>
    <script src="/lib/vue/vuedraggable.umd.min.js?v=Lw1ELK88FKeUDXLNnLnHq0i7DjoaZVc2XqGnomXivjU"></script>
    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>

    <script src="/js/site.js?v=Dczxt5NuA0rUBOxULTgExDzm3GOIcsTv--kGt06O6mg"></script>
    <script src="/js/vue-mixin.js?v=60-8lnAHDhQs4zrnv01y_MNen1l1tnXdiqLCDE4wdc4"></script>
</head>

<body id="app">
    <script>
        var thisApp;
        var component;
        const baseMixin = {
            data() {
                return {
                    Layout: {
                        headTitle: document.getElementsByTagName("title")[0].innerHTML,
                    },
                    dbAssembly: {
                        ready: false,
                    },
                }
            },
            beforeCreate() {
                thisApp = this
            },
            created() {
                thisApp.setHeadTitle(thisApp.pageTitle)
            },
            computed: {
            },
            methods: {
                firestoreInit: function () {
                    return new Promise((resolve, reject) => {
                        import("/js/firestore.js?v=1.0.04")
                            .then(module => {
                                thisApp.dbAssembly = module.dbAssembly;
                                resolve(true);
                            })
                    });
                },
                getDbAssembly: async function () {
                    let { ready } = thisApp.dbAssembly;

                    if (!ready) { await thisApp.firestoreInit(); }
                    return thisApp.dbAssembly;
                },
                dbInsert: async function (collectionName, data, docId = null) {
                    let { addDoc, setDoc, doc, collection, db } = await thisApp.getDbAssembly();
                    if (docId != null) { return await setDoc(doc(db, collectionName, docId), data); }
                    else { return await addDoc(collection(db, collectionName), data); }
                    
                },
                dbUpdate: async function (collectionName, docId, data) {
                    let { doc, updateDoc, db } = await thisApp.getDbAssembly();
                    const docRef = doc(db, collectionName, docId);
                    return await updateDoc(docRef, data);
                },
                dbQuery: async function (collectionName, docId = null) {
                    let { db, doc, getDoc, getDocs, collection } = await thisApp.getDbAssembly();
                    if (docId != null) { return await getDoc(doc(db, collectionName, docId)); }
                    else { return await getDocs(collection(db, collectionName)); }
                },
                dbQueryByWhere: async function (collectionName, condition) {
                    let { db, collection, query, where, getDocs } = await thisApp.getDbAssembly();
                    const q = query(collection(db, collectionName), condition);
                    return await getDocs(q);
                },
                dbDeleteDoc: async function (collectionName, docId) {
                    let { db, doc, deleteDoc } = await thisApp.getDbAssembly();
                    return await deleteDoc(doc(db, collectionName, docId));
                },
                signIn: async function () {
                    let { googleSignIn } = await thisApp.getDbAssembly();
                    return await googleSignIn();
                },
                signInWithEmail: async function (email, password) {
                    let { emailSignIn } = await thisApp.getDbAssembly();
                    return await emailSignIn(email, password);
                },
                getImage: async function (path) {
                    let { getImage } = await thisApp.getDbAssembly();
                    return await getImage(path);
                },
                deleteImage: async function (fileName) {
                    let { deleteImage } = await thisApp.getDbAssembly();
                    return await deleteImage(fileName);
                },
                uploadImage: async function (imageFile, fileName) {
                    let { uploadImage } = await thisApp.getDbAssembly();
                    return await uploadImage(imageFile, fileName);
                },
                newGuid: function () {
                    return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =>
                        (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
                    );
                },
                setHeadTitle(title) {
                    if (!title) { return; }
                    document.getElementsByTagName("title")[0].innerHTML = thisApp.Layout.headTitle + ' - ' + title;
                },

            },
        }
    </script>

    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3 px-5 nav-shadow navbar-animation">
            <div class="container-fluid">
                <a class="navbar-brand fw-bold fs-3 logo-text" href="/">百合天地</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                        aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                    <ul class="navbar-nav flex-grow-1">
                        <li class="nav-item me-3 px-2">
                            <a class="nav-link text-dark" href="/manga">百合漫畫區</a>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
    </header>
    <div class="container header-margin">
        <main role="main" class="pb-3">
            <div class="background-video pc-limit">
                <img src="/image/bg.jpg" style=" opacity: 0.8; width: 100vw; height:auto" />
            </div>

            <div class="background-video mobile-limit">
                <img src="/image/bg.jpg" style=" opacity: 0.8; width: 100vw; height:auto" />
            </div>
            
<div class="card shadow-sm mb-3">
	<div class="card-body">
		<div class="input-group mb-3">
			<div class="input-group-prepend me-3">
				<label class="input-group-text" for="inputGroupSelect01">篩選條件</label>
			</div>
			<div style="display: flex; align-self: center">
				<div class="form-check form-check-inline">
					<input v-model="searchType" class="form-check-input" type="radio" name="MatchType" id="MatchRadios1" value="partial" checked>
					<label class="form-check-label" for="MatchRadios1">部分符合</label>
				</div>
				<div class="form-check form-check-inline">
					<input v-model="searchType" class="form-check-input" type="radio" name="MatchType" id="MatchRadios2" value="exact">
					<label class="form-check-label" for="MatchRadios2">完全符合</label>
				</div>
			</div>
		</div>

		<div class="d-block"></div>

		<div style="box-shadow: inset 1px 1px 3px 0px #aaa; border-radius: 5px; padding: 0.5em; margin: 0 -0.5em;">
			<div class="input-group mb-3" style="z-index: 0;">
				<div class="input-group-prepend me-3">
					<label class="input-group-text" for="inputGroupSelect01">標籤操作</label>
				</div>
				<button type="button" class="btn rounded"
						:class="{ 'btn-outline-primary': searchMode != 1, 'btn-primary': searchMode == 1 }"
						@click="searchMode = 1">
					查詢模式
				</button>
				<button type="button" class="btn rounded ms-3"
						:class="{ 'btn-outline-danger': searchMode != 2, 'btn-danger': searchMode == 2 }"
						@click="searchMode = 2">
					排除模式
				</button>
				<span v-show="searchMode == 2" class="ms-2 text-danger fw-bold" style="align-self: center;">排除模式:點擊標籤可排除該特定資料(自己改)</span>
			</div>

			<div class="form-check-inline mb-2">
				<button class="btn btn-outline-success btn-sm" @click="selectAllTags">全選</button>
			</div>
			<div class="form-check-inline mb-2">
				<button class="btn btn-outline-dark btn-sm" @click="clearAllTags">全部清除</button>
			</div>

			<template v-for="type in tagType">
				<div class="d-block"></div>
				<template v-for="key of filteredTags(type)">
					<div class="form-check form-check-inline">
						<input v-model="tagList" :value="key.id" class="form-check-input" type="checkbox" :id="'tagCheckbox' + key.name" @change="updateHiddenTagList(key.id)">
						<label class="form-check-label" :class="{ 'strikethrough': isTagChecked(key.id) }" :for="'tagCheckbox' + key.name">{{ key.name }}</label>
					</div>
				</template>
			</template>
		</div>
	</div>
</div>


<div v-for="([key, v], i) in Object.entries(mangaData)" v-show="hasIntersection(v.tags, tagList)">
	<div class="card shadow-sm mb-3">
		<div class="card-body">
			<div class="row align-items-center">
				<div class="col-3 col-sm-2 col-lg-1">
					<img :src="urlData[key]" alt="" style="max-height: 100px; max-width: 50px;" />
				</div>
				<div class="col-9 col-sm-6 col-lg-7">
					<div class="row">
						<p class="mb-0 px-0 col-3 col-sm-3 col-lg-2 " style="display: inline;">名稱:</p><p class="mb-0 col-9 col-sm-9 col-lg-10">{{ v.name }}</p>
						<p class="mb-0 px-0 col-3 col-sm-3 col-lg-2" style="display: inline;">原名:</p><p class="mb-0 col-9  col-sm-9 col-lg-10">{{ v.originalName }}</p>
						<p class="mb-0 px-0 col-3 col-sm-3 col-lg-2" style="display: inline;">作者:</p><p class="mb-0 col-9  col-sm-9 col-lg-10">{{ v.author }}</p>
						<p class="mb-0 px-0 col-3 col-sm-3 col-lg-2" style="display: inline;">原作者:</p><p class="mb-0 col-9  col-sm-9 col-lg-10">{{ v.originalAuthor }}</p>
						<p class="mb-0 px-0 col-3 d-sm-none" style="display: inline;">標籤:</p><p class="mb-0 col-9 d-sm-none" style="display: inline;">{{ formatTags(v.tags) }}</p>
					</div>
				</div>
				<div class="col-sm-4 col-lg-4 d-none d-sm-block">
					<div class="row">
						<p class="mb-0 px-0 col-3 col-sm-3 col-lg-2 d-none d-sm-block" style="display: inline;">標籤:</p><p class="mb-0 col-9 col-sm-9 col-lg-10 d-none d-sm-block" style="display: inline;">{{ formatTags(v.tags) }}</p>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>


<script>
	component = {
		mixins: [baseMixin],
		data() {
			return {
				pageTitle: '百合漫畫區',
				mangaData: {},
				tagList: ['001', '002', '003', '020',],
				hiddenTagList: [],
				//selectedOption: "show",
				searchType: "partial",
				searchMode: 1,
				tagType: [],
				tagData: [],
				urlData: {},
			}
		},
		created() {
		},
		computed: {
			isTagChecked() {
				return (value) => {
					return this.hiddenTagList.includes(value);
				}
			},

			filteredTags() {
				return (tagType) => {
					const filteredTags = Object.entries(this.tagData)
						.filter(([key, value]) => value.attribute == tagType)
						.reduce((result, [key, value]) => {
							result[key] = value;
							return result;
						}, {});
					return filteredTags;
					//for (const [key, value] of Object.entries(this.tagData)) {
					//	if (value.attribute == tagType) {
					//		return Reflect.get(this.tagData[0], key);
					//	}
					//}
				};
			},
		},
		methods: {
			hasIntersection: function (ItemTags, tagList) {
				//預設全選
				//if (tagList.length === 0) {
				//    return !this.hiddenTagList.some((tag) => ItemTags.includes(tag));
				//}
				//console.log("hasIntersection");

				for (let i = 0; i < tagList.length; i++) {
					switch (this.searchType) {
						case "partial":
							return tagList.some((tag) => ItemTags.includes(tag)) && !this.hiddenTagList.some((tag) => ItemTags.includes(tag));
							break;
						case "exact":
							return tagList.every((tag) => ItemTags.includes(tag)) && !this.hiddenTagList.some((tag) => ItemTags.includes(tag));
							break;
					}
				}
			},

			async getFirestoreData() {
				const cachedMangaData = localStorage.getItem('MangasData');
				const cachedTagsData = localStorage.getItem('TagsData');
				const cachedImagesData = localStorage.getItem('ImagesData');
				let firstLoad = false;

				if (cachedMangaData) {
					this.mangaData = JSON.parse(cachedMangaData);
				} else {
					await this.fetchMangasData();
					firstLoad = true;
				}

				if (cachedTagsData && !firstLoad) {
					this.tagData = JSON.parse(cachedTagsData);
					const attributes = new Set(Object.values(this.tagData).map(obj => obj.attribute));
					this.tagType = Array.from(attributes).sort((a, b) => a.localeCompare(b));
				} else {
					await this.fetchTagsData();
				}

				if (cachedImagesData && !firstLoad) {
					this.urlData = JSON.parse(cachedImagesData);
				} else {
					await this.fetchImagesData();
				}

				if (!firstLoad) { await this.checkFirestoreData(cachedMangaData); }
			},

			async fetchMangasData() {
				try {
					//let mangaList = await this.dbQuery("Manga");
					//for (let i = 0; i < mangaList.docs.length; i++) {	
					//	let doc = mangaList.docs[i];
					//	thisApp.mangaData[doc.id] = doc.data();
					//}
					//console.log(JSON.stringify(thisApp.mangaData))

					let mangaList = await this.dbQuery("Json", "Manga");
					const jsonString = mangaList.data().jsonString;
					const jsonData = JSON.parse(jsonString);
					this.mangaData = jsonData;
					localStorage.setItem('MangasData', JSON.stringify(this.mangaData));
					console.log("fetchMangasData Success");
				} catch (error) {
					console.error("Error fetching mangas data:", error);
				}
			},

			async fetchTagsData() {
				//try {
				//	let tagList = await this.dbQuery("Tags", "Manga");
				//	this.tagType.push(Object.keys(tagList.data().tagData).sort((a, b) => a.localeCompare(b)));
				//	this.tagData.push(tagList.data().tagData);
				//	localStorage.setItem('TagsData', JSON.stringify(this.tagData));
				//	console.log("fetchTagsData Success");
				//} catch (error) {
				//	console.error("Error fetching tags data:", error);
				//}

				try {
					let tagList = await this.dbQuery("Tags", "MangaSetting");
					//將讀取到的attribute種類添加到tagType
					const attributes = new Set(Object.values(tagList.data()).map(obj => obj.attribute));
					this.tagType = Array.from(attributes).sort((a, b) => a.localeCompare(b));
					//將讀取到的tagList轉為array照id順序保存
					const array = Object.entries(tagList.data()).map(([key, value]) => {
						const id = key.padStart(3, '0');
						return { id, ...value };
					});
					// 依照讀取到sequence進行排序並存入tagData
					this.tagData = array.sort((a, b) => a.sequence - b.sequence);
					//本地化儲存
					localStorage.setItem('TagsData', JSON.stringify(this.tagData));
					console.log("fetchTagsData Success");
				} catch (error) {
					console.error("Error fetching tags data:", error);
				}
			},

			async fetchImagesData() {
				try {
					const keys = Object.keys(this.mangaData);
					//console.log(keys)
					for (let i = 0; i < keys.length; i++) {
						const imagePath = 'Manga/' + keys[i] + '.jpg';
						thisApp.urlData[keys[i]] = await this.getImage(imagePath);
					}
					localStorage.setItem('ImagesData', JSON.stringify(this.urlData));
					console.log("fetchImagesData Success");
				} catch (error) {
					console.error("Error fetching Images data:", error);
				}
			},

			async checkFirestoreData(cachedMangaData) {
				await this.fetchMangasData();
				if (cachedMangaData != JSON.stringify(this.mangaData)) {
					await this.fetchTagsData();
					await this.fetchImagesData();
				} else {
				}
			},

			updateHiddenTagList(value) {
				const index = this.tagList.indexOf(value);
				const hideIndex = this.hiddenTagList.indexOf(value);

				switch (this.searchMode) {
					case 1:
						if (hideIndex !== -1) {
							this.hiddenTagList.splice(hideIndex, 1);
						}
						break;
					case 2:
						if (index !== -1) {
							this.tagList.splice(index, 1);
							if (hideIndex != -1) {
								this.hiddenTagList.splice(hideIndex, 1);
							}
							else {
								this.hiddenTagList.push(value);
							}
						}
						else {
							this.hiddenTagList.push(value);
						}
						break;
				}
			},

			formatTags(tags) {
				let tagsString = [];
				for (tag of tags){
					const filteredData = this.tagData.filter(obj => obj.id === tag).map(obj => obj.name);
					tagsString.push(filteredData);
				}
				return tagsString.join(', ');
			},

			selectAllTags() {
				this.hiddenTagList = [];
				this.tagList = this.tagData.map(obj => obj.id);
			},
			clearAllTags() {
				this.tagList = [];
				this.hiddenTagList = [];
			},
		},
		watch: {
			tagList(nv, ov) {
			},
			searchType(nv, ov) {
			}
		},
		async mounted() {
			//this.fetchMangasData();
			this.getFirestoreData();
		}
	}
	var formComponent = Vue.createApp(component)
</script>
        </main>
    </div>

    <footer class="border-top footer text-muted">
        <div class="container">
            &copy; 2023 - Github - <a style="color: #6c757d" href="/Home/UpdateRenderView">更新</a>
        </div>
    </footer>

    <script>
        var vApp = formComponent.mount('#app')
    </script>



</body>
</html>
